{
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/text-embedding-004:embedContent",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "x-goog-api-key",
              "value": "AIzaSyCHn_Tg6t_Ts3VJZ_p4L78YRxUnMJE4An8"
            },
            {}
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"models/text-embedding-004\",\n  \"content\": {\n    \"parts\":[\n      {\n        \"text\": \"{{ $('Webhook').item.json.query.query }}\"\n      }\n    ]\n  }\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        260,
        120
      ],
      "id": "e804f93f-a2e8-4396-b258-8aa5491d3899",
      "name": "Gemini Text Embedding"
    },
    {
      "parameters": {
        "path": "ClinicalTrialsRag",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -140,
        120
      ],
      "id": "90e6ea3d-9e7a-4d58-aff9-172e214f44f2",
      "name": "Webhook",
      "webhookId": "57382c5d-8da3-48b2-a28a-055222ea7cd3"
    },
    {
      "parameters": {
        "resource": "graphDb",
        "indexName": "",
        "cypherQuery": "=CALL db.index.vector.queryNodes('clinicalTrialsVI', {{ $('Edit Fields').item.json.limit }}, [{{ $json.embedding.values }}])\nYIELD node, score \nOPTIONAL MATCH (node)-[:HAS_ELIGIBILITY]->(eligibility:Eligibility) \nOPTIONAL MATCH (node)-[:STUDIES_CONDITION]->(condition:Condition) \nOPTIONAL MATCH (node)-[:USES_INTERVENTION]->(intervention:Intervention) \nOPTIONAL MATCH (node)-[:HAS_DATES]->(dates:ClinicalTrialDates) \nOPTIONAL MATCH (node)-[:SPONSORED_BY]->(sponsor:Sponsor) \nOPTIONAL MATCH (node)-[:HAS_COLLABORATOR]->(collaborator:Collaborator) \nOPTIONAL MATCH (node)-[:HAS_CONTACT]->(contact:Contact) \nOPTIONAL MATCH (node)-[:LOCATED_AT]->(location:Location) \nOPTIONAL MATCH (node)-[:HAS_METADATA]->(clinicalTrialMetaData:ClinicalTrialMetaData) \nWITH \n  node, \n  score, \n  eligibility,\n  collect(DISTINCT condition) AS conditions,\n  collect(DISTINCT intervention) AS interventions,\n  dates,\n  sponsor,\n  collect(DISTINCT collaborator) AS collaborators,\n  collect(DISTINCT contact) AS contacts,\n  collect(DISTINCT location) AS locations,\n  clinicalTrialMetaData\nRETURN \nscore, \nnode.id AS id,\nnode.title AS title, \nnode.summary AS summary, \nnode.phase AS phase, \nnode.status AS status,\neligibility AS eligibility,\nconditions AS conditions,\ninterventions AS interventions,\ndates AS dates,\nsponsor AS sponsor,\ncollaborators AS collaborators,\ncontacts AS contacts,\nlocations AS locations,\nclinicalTrialMetaData AS clinicalTrialMetaData\nORDER BY score DESC\nLIMIT {{ $('Edit Fields').item.json.limit }};\n"
      },
      "type": "n8n-nodes-neo4j.neo4j",
      "typeVersion": 1,
      "position": [
        540,
        120
      ],
      "id": "eed23b51-0359-4f58-a4ef-5b4b2facae20",
      "name": "RAG NEO4J",
      "credentials": {
        "neo4jApi": {
          "id": "WlTVuYXtXiAn5lsm",
          "name": "Neo4j account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const trials = [];\n\nfor (const item of $input.all()) {\n  trials.push({\n    score: item.json.score,\n    id: item.json.id,\n    title: item.json.title,\n    summary: item.json.summary,\n    phase: item.json.phase,\n    status: item.json.status,\n    egibility: item.json.eligibility,\n    conditions: item.json.conditions,\n    interventions: item.json.interventions,\n    date: item.json.dates,\n    sponsor: item.json.sponsor,\n    collaborators: item.json.collaborators,\n    contacts: item.json.contacts,\n    locations: item.json.locations,\n    metaData: item.json.clinicalTrialMetaData\n  });\n}\n\nreturn trials.map(trial => ({ json: trial }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        120
      ],
      "id": "ab7ec6a5-d813-4867-a556-222241a6680c",
      "name": "Reformate Respond Data"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $input.all() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1080,
        120
      ],
      "id": "d403ab0a-20f4-4d71-98d7-491e81516f50",
      "name": "Return Clinical Trials"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0611021e-0815-467b-a9ad-ff8086e62680",
              "name": "limit",
              "value": "={{ $json.query.limit?.isNumeric() ? Math.round($json.query.limit) : 10}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        120
      ],
      "id": "03dc1b10-a677-4e59-946a-b356ecd70fa1",
      "name": "Edit Fields"
    }
  ],
  "connections": {
    "Gemini Text Embedding": {
      "main": [
        [
          {
            "node": "RAG NEO4J",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG NEO4J": {
      "main": [
        [
          {
            "node": "Reformate Respond Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reformate Respond Data": {
      "main": [
        [
          {
            "node": "Return Clinical Trials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Gemini Text Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d19ad8d6d925953386bcaefd90b1322f319c955024c0f733144adb20b40abd2b"
  }
}