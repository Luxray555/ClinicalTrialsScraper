{
  "name": "AI Scraper API",
  "nodes": [
    {
      "parameters": {
        "content": "## Scrape Clinical Trial",
        "height": 860,
        "width": 1580
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1040,
        -400
      ],
      "id": "3b922c89-f97d-4963-a8e5-3b1650e5e40d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        800,
        -280
      ],
      "id": "0413d3b3-26af-4f44-8bd2-c9ad3fbb17e1",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        -220,
        300
      ],
      "id": "e80d49bc-5b4a-448b-9f4f-afbdc6a459ba",
      "name": "Mistral Cloud Chat Model",
      "credentials": {
        "mistralCloudApi": {
          "id": "6RV01vLp6EqdaDq4",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "model": "mistral-large-latest",
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1800,
        240
      ],
      "id": "3cb99b71-16c6-4121-ae46-bce0c05f8f74",
      "name": "Mistral Cloud Chat Model1",
      "credentials": {
        "mistralCloudApi": {
          "id": "6RV01vLp6EqdaDq4",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Voici l'url de la page de recherche:\n{{ $('Search Page Request').item.json.url }}\nVoici la page html:\n{{ $json.data }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "Tu es un expert en extraction d’informations depuis du HTML (web scraping). Ton rôle est d’analyser une page de recherche d’essais cliniques et d’extraire **uniquement** les URLs complètes des essais cliniques listés dans cette page.\n\nUtilise l’URL de la page de recherche fournie si besoin pour compléter les liens relatifs.\n\nTu ne dois pas deviner de liens. Si la page ne contient **aucun** lien vers des essais cliniques (par exemple si la recherche est vide ou en fin de pagination), tu dois obligatoirement renvoyer dans le format JSON SCHEMA suivant:\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urls\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"format\": \"uri\"\n      }\n    }\n  }\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -160,
        -260
      ],
      "id": "20e60334-d3a0-4bcf-affd-eedf06dc2825",
      "name": "AI Agent Search Page"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Voici la page html:\n{{ $json.data }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "Tu es un expert en analyse HTML et en extraction d'informations web (web scraping). Ton rôle est d'examiner une page d'essaie clinique et d'identifier les données nécessaires requis dans le format JSON attendu ci dessous. Tu dois répondre uniquement en JSON structuré, sans commentaire.\n\nFormat JSON SCHEMA attendu :\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"originalSourceId\": {\n      \"type\": \"string\"\n    },\n    \"trialSourceUrl\": {\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"currentEnrollmentCount\": {\n      \"type\": \"integer\"\n    },\n    \"organization\": {\n      \"type\": \"string\"\n    },\n    \"summary\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"COMPLETED\", \"TERMINATED\", \"RECRUITING\", \"NOT_YET_RECRUITING\", \"WITHDRAWN\", \"SUSPENDED\", \"UNKNOWN\", \"ACTIVE_NOT_RECRUITING\", \"ENROLLING_BY_INVITATION\", \"APPROVED_FOR_MARKETING\", \"NO_LONGER_AVAILABLE\", \"TEMPORARILY_NOT_AVAILABLE\"]\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"enum\": [\"INTERVENTIONAL\", \"OBSERVATIONAL\", \"EXPANDED_ACCESS\"]\n    },\n    \"phase\": {\n      \"type\": \"string\",\n      \"enum\": [\"EARLY_PHASE1\", \"PHASE1\", \"PHASE2\", \"PHASE3\", \"PHASE4\", \"NA\"]\n    },\n    \"dates\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"startDate\": {\n          \"type\": \"string\",\n          \"format\": \"date\"\n        },\n        \"estimatedCompletionDate\": {\n          \"type\": \"string\",\n          \"format\": \"date\"\n        }\n      }\n    },\n    \"conditions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":{\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"interventions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\"DRUG\", \"BEHAVIORAL\", \"DEVICE\", \"BIOLOGICAL\", \"OTHER\", \"COMBINATION_PRODUCT\", \"PROCEDURE\", \"RADIATION\", \"DIETARY_SUPPLEMENT\", \"DIAGNOSTIC_TEST\", \"GENETIC\"]\n          }\n        }\n      }\n    },\n    \"eligibility\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"gender\": {\n          \"type\": \"string\",\n          \"enum\": [\"ALL\", \"MALE\", \"FEMALE\"]\n        },\n        \"minAge\": {\n          \"type\": [\"integer\", \"null\"]\n        },\n        \"maxAge\": {\n          \"type\": [\"integer\", \"null\"]\n        },\n        \"eligibilityCriteria\": {\n          \"type\": \"string\",\n          \"description\": \"Description complete avec les titres des egibilité également avec les saut à la ligne\"\n        }\n      }\n    },\n    \"sponsor\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"collaborators\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"contacts\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"email\": {\n            \"type\": \"string\",\n            \"format\": \"email\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"phone\": {\n            \"type\": \"string\"\n          },\n          \"isMainContact\": {\n            \"type\": \"boolean\"\n          }\n        }\n      }\n    },\n    \"locations\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"city\": {\n            \"type\": \"string\"\n          },\n          \"country\": {\n            \"type\": \"string\"\n          },\n          \"facility\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"required\": [\"originalSource_id\", \"trialSource_url\", \"title\", \"currentEnrollmentCount\", \"organization\", \"summary\", \"status\", \"type\", \"phase\", \"dates\", \"conditions\", \"interventions\", \"eligibility\", \"sponsor\", \"collaborators\", \"contacts\", \"locations\"]\n}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1820,
        -260
      ],
      "id": "5b8f28f2-f7b5-4b1d-87f7-49157ad43ff4",
      "name": "AI Agent Scrape Page"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        1900,
        -40
      ],
      "id": "c8edffa9-eab3-4cd4-95b4-ad5e3e319282",
      "name": "Auto-fixing Output Parser"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "typeVersion": 1,
      "position": [
        -40,
        20
      ],
      "id": "dcbfe8c7-fbff-48e6-bd3e-805b1f7c04a3",
      "name": "Auto-fixing Output Parser1"
    },
    {
      "parameters": {
        "url": "={{ $('Start Webhook').item.json.query.url }}&{{ $('Successfully execution').item.json.query.paginationParameter }}={{ $json.page }}",
        "options": {
          "waitUntil": "networkidle0"
        }
      },
      "type": "n8n-nodes-puppeteer.puppeteer",
      "typeVersion": 1,
      "position": [
        -880,
        -260
      ],
      "id": "91a29dc2-582d-4e53-b943-d8b8e43189e2",
      "name": "Search Page Request"
    },
    {
      "parameters": {
        "html": "={{ $json.body }}",
        "options": {
          "useLinkReferenceDefinitions": true
        }
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        -380,
        -260
      ],
      "id": "2c4f86a5-6d59-4d19-9e0b-1fb7adeb2dd1",
      "name": "Search Page To Markdown"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "=body",
        "extractionValues": {
          "values": [
            {
              "key": "body",
              "cssSelector": "body",
              "returnValue": "html"
            }
          ]
        },
        "options": {
          "trimValues": true,
          "cleanUpText": true
        }
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -620,
        -260
      ],
      "id": "61863383-3c9d-4ba5-b745-42b17e54f5cf",
      "name": "Get Search Page Body"
    },
    {
      "parameters": {
        "jsCode": "let items = [];\n\nfor (const url of $('AI Agent Search Page').first().json.output.urls) {\n  items.push({\n    json: {\n      url: url\n    }\n  });\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        540,
        -280
      ],
      "id": "ae68624d-0bc1-4f05-9f80-88bf850ef1eb",
      "name": "Urls list for loop"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "waitUntil": "networkidle0"
        }
      },
      "type": "n8n-nodes-puppeteer.puppeteer",
      "typeVersion": 1,
      "position": [
        1100,
        -260
      ],
      "id": "a2305644-f345-4cb7-a843-8b323069e495",
      "name": "Request Trinical Trial Page"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "=body",
        "extractionValues": {
          "values": [
            {
              "key": "body",
              "cssSelector": "body",
              "returnValue": "html"
            }
          ]
        },
        "options": {
          "trimValues": true,
          "cleanUpText": true
        }
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        1320,
        -260
      ],
      "id": "5857e639-175e-407d-a887-0e84eef262f1",
      "name": "Get Clinical Trial Page Body"
    },
    {
      "parameters": {
        "html": "={{ $json.body }}",
        "options": {}
      },
      "type": "n8n-nodes-base.markdown",
      "typeVersion": 1,
      "position": [
        1580,
        -260
      ],
      "id": "0276ce80-b73c-4ce1-972f-f8ce1d786f7e",
      "name": "Clinical Trial Page To Markdown"
    },
    {
      "parameters": {
        "jsCode": "var item = {\n  clinical_trial: {\n    // Infos d'essai clinique ajoutées\n    title: $input.first().json.output.title,\n    status: $input.first().json.output.status,\n    summary: $input.first().json.output.summary,\n    currentEnrollmentCount: $input.first().json.output.currentEnrollmentCount,\n    type: $input.first().json.output.type,\n    phase: $input.first().json.output.phase,\n    organization: $input.first().json.output.organization,\n    dates: $input.first().json.output.dates,\n    conditions: $input.first().json.output.conditions,\n    interventions: $input.first().json.output.interventions,\n    eligibility: $input.first().json.output.eligibility,\n    sponsor: $input.first().json.output.sponsor,\n    collaborators: $input.first().json.output.collaborators,\n    contacts: $input.first().json.output.contacts,\n    locations: $input.first().json.output.locations,\n    sourceMetaData: {\n      originalSourceId: $input.first().json.output.originalSourceId,\n      trialSourceUrl: $input.first().json.output.trialSourceUrl,\n      dataSource: {\n        name: \"ClinicalTrials.gov public API\",\n        type: \"API\",\n        uri: $('Start Webhook').first().json.query.url\n      }\n    }\n  }\n};\n\nreturn item;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2200,
        -260
      ],
      "id": "366bc0a0-f511-4922-a988-90c1598cefe9",
      "name": "Convert To Mongo Data"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "453462cb-3e4d-4483-ae9b-f2264560e0b1",
              "leftValue": "={{ $json.output.urls }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        300,
        -260
      ],
      "id": "3b75ae15-6863-4207-998d-d24c18010630",
      "name": "If Clinical Trials"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93e7c0f6-ef26-4199-9a75-c111cd00b4fd",
              "name": "page",
              "value": "={{ $json.page ? $json.page + 1 : $('Pagination Initialisation').item.json.page + 1 }}",
              "type": "number"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        820,
        -480
      ],
      "id": "a2ddbbc6-0555-4cfd-a122-1e6a959c7e50",
      "name": "Pagination Incrementation"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "93e7c0f6-ef26-4199-9a75-c111cd00b4fd",
              "name": "page",
              "value": "={{ $json.page ? $json.page : 1 }}",
              "type": "number"
            }
          ]
        },
        "options": {
          "dotNotation": true
        }
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1140,
        -260
      ],
      "id": "d47f9e96-7054-4fd2-884f-045e800f0970",
      "name": "Pagination Initialisation"
    },
    {
      "parameters": {
        "path": "AIScraper",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -3140,
        -240
      ],
      "id": "ee483dda-0467-4a6e-b1c8-90804156202d",
      "name": "Start Webhook",
      "webhookId": "c3905bc0-5807-433c-9aae-c77ab59b363f"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"urls\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"format\": \"uri\"\n      }\n    }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        140,
        300
      ],
      "id": "ab351651-e4e3-42fc-a53e-688a992d4f21",
      "name": "URLS OUTPUT SCHEMA PARSER"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"originalSourceId\": {\n      \"type\": \"string\"\n    },\n    \"trialSourceUrl\": {\n      \"type\": \"string\",\n      \"format\": \"uri\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"currentEnrollmentCount\": {\n      \"type\": \"integer\"\n    },\n    \"organization\": {\n      \"type\": \"string\"\n    },\n    \"summary\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\"COMPLETED\", \"TERMINATED\", \"RECRUITING\", \"NOT_YET_RECRUITING\", \"WITHDRAWN\", \"SUSPENDED\", \"UNKNOWN\", \"ACTIVE_NOT_RECRUITING\", \"ENROLLING_BY_INVITATION\", \"APPROVED_FOR_MARKETING\", \"NO_LONGER_AVAILABLE\", \"TEMPORARILY_NOT_AVAILABLE\"]\n    },\n    \"type\": {\n      \"type\": \"string\",\n      \"enum\": [\"INTERVENTIONAL\", \"OBSERVATIONAL\", \"EXPANDED_ACCESS\"]\n    },\n    \"phase\": {\n      \"type\": \"string\",\n      \"enum\": [\"EARLY_PHASE1\", \"PHASE1\", \"PHASE2\", \"PHASE3\", \"PHASE4\", \"NA\"]\n    },\n    \"dates\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"startDate\": {\n          \"type\": \"string\",\n          \"format\": \"date\"\n        },\n        \"estimatedCompletionDate\": {\n          \"type\": \"string\",\n          \"format\": \"date\"\n        }\n      }\n    },\n    \"conditions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\":{\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"interventions\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"enum\": [\"DRUG\", \"BEHAVIORAL\", \"DEVICE\", \"BIOLOGICAL\", \"OTHER\", \"COMBINATION_PRODUCT\", \"PROCEDURE\", \"RADIATION\", \"DIETARY_SUPPLEMENT\", \"DIAGNOSTIC_TEST\", \"GENETIC\"]\n          }\n        }\n      }\n    },\n    \"eligibility\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"gender\": {\n          \"type\": \"string\",\n          \"enum\": [\"ALL\", \"MALE\", \"FEMALE\"]\n        },\n        \"minAge\": {\n          \"type\": [\"integer\", \"null\"]\n        },\n        \"maxAge\": {\n          \"type\": [\"integer\", \"null\"]\n        },\n        \"eligibilityCriteria\": {\n          \"type\": \"string\",\n          \"description\": \"Description complete avec les titres des egibilité également avec les saut à la ligne\"\n        }\n      }\n    },\n    \"sponsor\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"collaborators\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"contacts\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"email\": {\n            \"type\": \"string\",\n            \"format\": \"email\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"phone\": {\n            \"type\": \"string\"\n          },\n          \"isMainContact\": {\n            \"type\": \"boolean\"\n          }\n        }\n      }\n    },\n    \"locations\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"city\": {\n            \"type\": \"string\"\n          },\n          \"country\": {\n            \"type\": \"string\"\n          },\n          \"facility\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  },\n  \"required\": [\"originalSource_id\", \"trialSource_url\", \"title\", \"currentEnrollmentCount\", \"organization\", \"summary\", \"status\", \"type\", \"phase\", \"dates\", \"conditions\", \"interventions\", \"eligibility\", \"sponsor\", \"collaborators\", \"contacts\", \"locations\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2080,
        220
      ],
      "id": "0471c92c-4f99-40e2-9b21-947a4f7c1659",
      "name": "CLINICAL TRIAL SCHEMA PARSER"
    },
    {
      "parameters": {
        "url": "={{ $('Start Webhook').item.json.query.url }}",
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1980,
        -240
      ],
      "id": "fc7fb58c-8259-47f3-943f-41ccd1b23b19",
      "name": "Test Url Search Page",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"statusCode\": \"400\",\n  \"error\": \"Bad Request\",\n  \"message\": \"Missing required parameter: url\",\n  \"timestamp\": \"{{ $now }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2160,
        0
      ],
      "id": "f6175ce1-6a06-4e22-8167-16711ce80650",
      "name": "Need Url Error"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "502828ba-2866-4cac-892f-16a4b114cf51",
              "leftValue": "={{ $('Start Webhook').item.json.query.url}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2160,
        -240
      ],
      "id": "3864f353-581f-4f3d-aee1-c42c3abe800f",
      "name": "Check Url Parameter"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b25c948e-20a2-430e-9085-11c6141b4943",
              "leftValue": "={{ $('Start Webhook').item.json.query.paginationParameter }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1720,
        -240
      ],
      "id": "07ca22a1-027c-42e4-8646-1333451214d4",
      "name": "If"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"statusCode\": \"400\",\n  \"error\": \"BadRequest\",\n  \"message\": \"Missing required parameter: paginationParameter\",\n  \"timestamp\": \"{{ $now }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1660,
        0
      ],
      "id": "0e18b006-6b04-48fc-b68a-2c7cd3ad389d",
      "name": "Need Pagination Error"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"statusCode\": 404,\n  \"error\": \"Not Found\",\n  \"message\": \"Provided URL not found or returned a 404 response\",\n  \"timestamp\": \"{{ $now }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1920,
        0
      ],
      "id": "482d0ffd-d4a7-48e5-975d-9c2bca7fee54",
      "name": "Not Found Url Error"
    },
    {
      "parameters": {
        "content": "## Check Parameters and return statement",
        "height": 660,
        "width": 1520,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2800,
        -400
      ],
      "id": "39f902b9-265a-4d6d-a057-6c744de31d89",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Scrape Search Page",
        "height": 860,
        "width": 1480,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1220,
        -400
      ],
      "id": "adde1718-0050-48cc-890e-76b5ed5ebeab",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"statusCode\": 200,\n  \"message\": \"Workflow started successfully\",\n  \"data\": {\n    \"id\": {{ $execution.id }},\n    \"stopUrl\": {\n      \"url\": \"http://localhost:5678/api/v1/executions/{{ $execution.id }}\",\n      \"method\": \"DELETE\"\n    }\n  },\n  \"timestamp\": \"{{$now}}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -1440,
        -260
      ],
      "id": "5a4d7e7f-5d0c-4519-8dfd-e4efdaba9e3f",
      "name": "Successfully execution"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"statusCode\": 500,\n  \"error\": \"Internal Server Error\",\n  \"message\": \"Neo4j connection failed ❌. The database may be offline or unreachable.\",\n  \"service\": \"neo4j\",\n  \"suggestion\": \"Make sure the Neo4j instance is running and the credentials are correct.\",\n  \"timestamp\": \"{{$now}}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2360,
        0
      ],
      "id": "b0fc0345-8798-4d31-b7c1-b58a20ffc6cb",
      "name": "Neo4j Not Lauched Error"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e4e9d764-a9e7-41ba-89a8-45136474b6e2",
              "name": "Backend Endpoint",
              "value": "http://localhost:3000",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2960,
        -240
      ],
      "id": "842ebcd1-eb20-427c-9d7a-3c5b8af80559",
      "name": "Default Parameters"
    },
    {
      "parameters": {
        "content": "## Define Backend Endpoint",
        "height": 340,
        "width": 180,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3000,
        -400
      ],
      "id": "accdfedd-5147-491f-8125-84b86a3011bb",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "url": "={{ $('Default Parameters').item.json['Backend Endpoint'] }}/clinical-trials/create-or-update",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2760,
        -240
      ],
      "id": "d88c6f01-1695-4f02-9b75-e95d26cd2c4e",
      "name": "Test Backend",
      "alwaysOutputData": false,
      "credentials": {
        "httpBasicAuth": {
          "id": "5CcWOL8yHJ5r3gH6",
          "name": "Neo4j"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Default Parameters').item.json['Backend Endpoint'] }}/clinical-trials/create-or-update",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.clinical_trial }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2440,
        -260
      ],
      "id": "6ec8811f-adf1-4988-881f-38347650f0f6",
      "name": "Insert Clinical Trial"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2f2b6ca0-b6ff-4e8a-884b-12865ca0cfb6",
              "leftValue": "={{ $(\"Test Backend\").item.json.error.code }}",
              "rightValue": "ERR_BAD_RESPONSE",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2360,
        -240
      ],
      "id": "6c923782-b7e3-40d0-ac9b-bd55d09931ef",
      "name": "Check Neo4j Not Launched"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7ab3d289-55b5-42d7-b3f2-4d53b0b4571e",
              "leftValue": "={{ $(\"Test Backend\").item.json.error.code }}",
              "rightValue": "ECONNREFUSED",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2580,
        -240
      ],
      "id": "230e57cb-d33a-4502-aa23-d33edacd001c",
      "name": "Check Backend Not Launched"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"statusCode\": 500,\n  \"error\": \"Internal Server Error\",\n  \"message\": \"Backend connection failed ❌. The backend service is down.\",\n  \"service\": \"backend\",\n  \"suggestion\": \"Make sure the Backend instance is running .\",\n  \"timestamp\": \"{{$now}}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -2560,
        0
      ],
      "id": "46a048d4-c291-444e-9add-9158042155a5",
      "name": "Backend Not Lauched Error"
    }
  ],
  "pinData": {},
  "connections": {
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Pagination Incrementation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Request Trinical Trial Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Search Page",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Auto-fixing Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent Scrape Page",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Search Page": {
      "main": [
        [
          {
            "node": "If Clinical Trials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent Scrape Page": {
      "main": [
        [
          {
            "node": "Convert To Mongo Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent Scrape Page",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent Search Page",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Search Page Request": {
      "main": [
        [
          {
            "node": "Get Search Page Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Page To Markdown": {
      "main": [
        [
          {
            "node": "AI Agent Search Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Search Page Body": {
      "main": [
        [
          {
            "node": "Search Page To Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Urls list for loop": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request Trinical Trial Page": {
      "main": [
        [
          {
            "node": "Get Clinical Trial Page Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Clinical Trial Page Body": {
      "main": [
        [
          {
            "node": "Clinical Trial Page To Markdown",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clinical Trial Page To Markdown": {
      "main": [
        [
          {
            "node": "AI Agent Scrape Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert To Mongo Data": {
      "main": [
        [
          {
            "node": "Insert Clinical Trial",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Clinical Trials": {
      "main": [
        [
          {
            "node": "Urls list for loop",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Pagination Incrementation": {
      "main": [
        [
          {
            "node": "Pagination Initialisation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagination Initialisation": {
      "main": [
        [
          {
            "node": "Search Page Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Webhook": {
      "main": [
        [
          {
            "node": "Default Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "URLS OUTPUT SCHEMA PARSER": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "CLINICAL TRIAL SCHEMA PARSER": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Test Url Search Page": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Not Found Url Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Url Parameter": {
      "main": [
        [
          {
            "node": "Test Url Search Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Need Url Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Successfully execution",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Need Pagination Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Successfully execution": {
      "main": [
        [
          {
            "node": "Pagination Initialisation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Parameters": {
      "main": [
        [
          {
            "node": "Test Backend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Backend": {
      "main": [
        [
          {
            "node": "Check Backend Not Launched",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Insert Clinical Trial": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Neo4j Not Launched": {
      "main": [
        [
          {
            "node": "Neo4j Not Lauched Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Url Parameter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Backend Not Launched": {
      "main": [
        [
          {
            "node": "Backend Not Lauched Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Neo4j Not Launched",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5b700b66-1647-4da1-8f26-a801add8263b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d19ad8d6d925953386bcaefd90b1322f319c955024c0f733144adb20b40abd2b"
  },
  "id": "SK0RcNw3jU3PC65K",
  "tags": []
}